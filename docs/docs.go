// Package docs Code generated by swaggo/swag. DO NOT EDIT
package docs

import "github.com/swaggo/swag"

const docTemplate = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "contact": {},
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/category/create": {
            "post": {
                "description": "Add good to the database of goods",
                "produces": [
                    "application/json"
                ],
                "summary": "Create category",
                "parameters": [
                    {
                        "description": "Category Info",
                        "name": "categoryInput",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/model.CategoryInputResponse"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/model.CategoryInputResponse"
                        }
                    }
                }
            }
        },
        "/category/list": {
            "get": {
                "description": "Get categories list",
                "produces": [
                    "application/json"
                ],
                "summary": "Get all categories",
                "responses": {
                    "200": {
                        "description": "OK"
                    }
                }
            }
        },
        "/category/remove/{id}": {
            "delete": {
                "description": "Deletes category and updates all goods categories (removes deleted category)",
                "produces": [
                    "application/json"
                ],
                "summary": "Delete category",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {}
            }
        },
        "/category/update/{id}": {
            "patch": {
                "description": "Updates existing goods instance",
                "produces": [
                    "application/json"
                ],
                "summary": "Update existing good",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Updated Category",
                        "name": "item",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/model.CategoryInputResponse"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/model.CategoryInputResponse"
                        }
                    }
                }
            }
        },
        "/good/create": {
            "post": {
                "description": "Add good to the database of goods.",
                "produces": [
                    "application/json"
                ],
                "summary": "Create good",
                "parameters": [
                    {
                        "description": "Good Info",
                        "name": "goodInput",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/model.GoodInputResponse"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/model.GoodInputResponse"
                        }
                    }
                }
            }
        },
        "/good/list/{category_id}": {
            "get": {
                "description": "Get goods list by the inputted category",
                "produces": [
                    "application/json"
                ],
                "summary": "Get goods by category ID",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Category ID",
                        "name": "category_id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK"
                    }
                }
            }
        },
        "/good/remove/{id}": {
            "delete": {
                "description": "Deletes good instance",
                "produces": [
                    "application/json"
                ],
                "summary": "Delete good",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {}
            }
        },
        "/good/update/{id}": {
            "patch": {
                "description": "Updates existing goods instance",
                "produces": [
                    "application/json"
                ],
                "summary": "Update existing good",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Updated good",
                        "name": "item",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/model.GoodInputResponse"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/model.GoodInputResponse"
                        }
                    }
                }
            }
        },
        "/login": {
            "post": {
                "description": "User-login",
                "produces": [
                    "application/json"
                ],
                "summary": "Login-endpoint",
                "parameters": [
                    {
                        "description": "Login data",
                        "name": "loginInput",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/model.Login"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/model.User"
                        }
                    }
                }
            }
        },
        "/register": {
            "post": {
                "description": "User-registration",
                "produces": [
                    "application/json"
                ],
                "summary": "Registration-endpoint",
                "parameters": [
                    {
                        "description": "Registration data",
                        "name": "regInput",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/model.Register"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/model.User"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "model.CategoryInputResponse": {
            "type": "object",
            "properties": {
                "name": {
                    "type": "string"
                }
            }
        },
        "model.GoodInputResponse": {
            "type": "object",
            "properties": {
                "categories": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    }
                },
                "name": {
                    "type": "string"
                }
            }
        },
        "model.Login": {
            "type": "object",
            "properties": {
                "password": {
                    "type": "string"
                },
                "username": {
                    "type": "string"
                }
            }
        },
        "model.Register": {
            "type": "object",
            "properties": {
                "email": {
                    "type": "string"
                },
                "password": {
                    "type": "string"
                },
                "phone-number": {
                    "type": "string"
                },
                "username": {
                    "type": "string"
                }
            }
        },
        "model.User": {
            "type": "object",
            "required": [
                "email",
                "password",
                "username"
            ],
            "properties": {
                "email": {
                    "type": "string"
                },
                "id": {
                    "type": "integer"
                },
                "password": {
                    "type": "string"
                },
                "phone_number": {
                    "type": "string"
                },
                "username": {
                    "type": "string"
                }
            }
        }
    }
}`

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = &swag.Spec{
	Version:          "",
	Host:             "localhost:7777",
	BasePath:         "/",
	Schemes:          []string{},
	Title:            "",
	Description:      "",
	InfoInstanceName: "swagger",
	SwaggerTemplate:  docTemplate,
	LeftDelim:        "{{",
	RightDelim:       "}}",
}

func init() {
	swag.Register(SwaggerInfo.InstanceName(), SwaggerInfo)
}
